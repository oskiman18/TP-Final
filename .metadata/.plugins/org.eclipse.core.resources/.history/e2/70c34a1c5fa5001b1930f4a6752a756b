package ejercicio1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

public class Persona {
	private String dni;
	private String nombre;
	private String apellido;

	// ctor's
	public Persona() {
	}

	public Persona(String dni, String nombre, String apellido) {
		this.dni = dni;
		this.nombre = nombre;
		this.apellido = apellido;
	}

	// setters and getters
	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getApellido() {
		return apellido;
	}

	public void setApellido(String apellido) {
		this.apellido = apellido;
	}

	public String getDni() {
		return dni;
	}

	public void setDni(String dni) {
		this.dni = dni;
	}

	// to string
	public String toString() {
		return  "Nombre: " + nombre + ", Apellido: " + apellido + ", DNI: " + dni;
	}

	public boolean validarDNI() throws DniInvalido { 
		boolean auxLetra = false;
		
		//check that it does not contain an leter
		for (int i = 0; i < dni.length(); i++) {
			if(!isNumeric(dni.charAt(i))) {
				auxLetra=true;
			}
		}
		
		if(auxLetra) {
			throw new DniInvalido();
		}
		
		if(!auxLetra) {
			//codigo
			return true;
		}
		return false;
	}
	public static boolean isNumeric(char l) {
		char[] numeros = {'0','1','2','3','4','5', '6','7','8','9'};
		for (int i = 0; i < numeros.length; i++) {
			if(l == numeros[i]) {
				return true;
			}
		}
		return false;
	}
	
	public ArrayList<Persona> leetArchivo(boolean ordenar) {
		FileReader archivo; 
		ArrayList<Persona> personas = new ArrayList<Persona>();
		
		try {
			archivo = new FileReader("./Personas.txt");
			BufferedReader buff = new BufferedReader(archivo);
			
			
			String linea = "";
			while (linea != null) {
				linea = buff.readLine();
				
				String[] data = linea.split("-");
				Persona per = new Persona(data[0], data[1], data[2]);
				
				if( !per.validarDNI() ) { continue; }
				personas.add(per);
				
			}
			archivo.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(ordenar) {
			personas.sort((o1, o2) -> o1.getNombre().compareTo(o2.getNombre()));
			this.ordenarListado(personas);
		}
		
		return new ArrayList<Persona>();
	}

}
